import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import NaviAdmin from '../Navi/NaviAdmin';
import '../css/dev.css';
import JudgeModal from './JudgeModal';
import Swal from "sweetalert2";

const JudgeDetail = ({ match, history }) => {

    const { imageidx } = match.params;

    const [data, setData] = useState({});
    const [denyList, setDenyList] = useState([]);
    const [modalIsOpen, setModalIsOpen] = useState(false);
    const [reason, setReason] = useState('Í±∞Ï†à ÏÇ¨Ïú†Î•º ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî.');
    const [denyIdx, setDenyIdx] = useState(0);

    useEffect(() => {

        axios.get(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/admin/applist/${imageidx}`,
            { headers: { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` } })
            .then(res => {
                setData(res.data);
            })
            .catch(err => {
                console.log(err);
            })
    }, [])

    // ÏäπÏù∏ ÌõÑ ÏûêÎèô Ïï± Ï∂úÏãú
    const handlerOnSubmit = () => {

        new Swal({
            title: "Ïï±ÏùÑ Ï∂úÏãúÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
            text: "Ïï±ÏùÑ Ï∂úÏãúÌïòÍ≤å ÎêòÎ©¥ Î∞îÎ°ú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏÉÅÌÉúÍ∞Ä Îê©ÎãàÎã§.",
            showCancelButton: true,
            confirmButtonText: 'OK',
            cancelButtonText: 'Cancel',
            dangerMode: true,
            reverseButtons: true
        })

            .then((result) => {
                if (result.isConfirmed) {
                    axios.put(
                        `http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/admin/access/${imageidx}`,
                        '',
                        { headers: { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` } }
                    )
                        .then(res => {
                            Swal.fire({
                                title: "üéâÏï±Ïù¥ Ï∂úÏãúÎêòÏóàÏäµÎãàÎã§.üéâ",
                                showConfirmButton: false,
                                timer: 800
                            });
                            history.push(`/admin`);                            
                        })
                        .catch(err => {
                            console.log(err);
                            Swal.fire({
                                text: "ÏäπÏù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
                                showConfirmButton: false,
                                timer: 800
                            });
                        })
                }
            })


    };

    // ÌÅ¥Î¶≠ Ïãú Ïã¨ÏÇ¨ Í±∞Ï†à ÏÇ¨Ïú† ÏÑ†ÌÉù Î™®Îã¨ Ïò§Ìîà
    const handlerDeny = () => {
        setModalIsOpen(true);
        axios.get(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/admin/denylist`,
            { headers: { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` } })
            .then(res => {
                setDenyList(res.data);
            })
            .catch(err => {
                console.log(err);
            })
    };

    // Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏Ïóê propsÎ°ú Ï†ÑÎã¨Îê† reason ÏÑ†ÌÉù Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
    const handlerClickReason = (e) => {
        setReason(e.target.outerText);
        setDenyIdx(e.target.value);
    };

    // Î™®Îã¨ÏóêÏÑú ÏÑ†ÌÉùÎêú Í∞íÍ≥º Ìï®Íªò Ïã¨ÏÇ¨ Í±∞Ï†à Ï≤òÎ¶¨
    const handlerSubmitDeny = () => {
        axios.put(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/admin/deny/${imageidx}/${denyIdx}`,
            { headers: { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` } })
            .then(res => {
                Swal.fire({ text: `Ïã¨ÏÇ¨ Í±∞Ï†à Ï≤òÎ¶¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.` });
                setModalIsOpen(false);
                history.push(`/admin`);
            })
            .catch(err => {
                console.log(err);
            })
    };

    // Ïπ¥ÌÖåÍ≥†Î¶¨ Ïù¥Î¶Ñ ÏÑ§Ï†ï
    const handlerSetCategoryName = () => {
        if (data.categoryIdx == 1) {
            return (
                <input type='text'
                    className='detailtext-inputbox'
                    value='LifeOn'
                    readOnly />
            );
        } else {
            return (
                <input type='text'
                    className='detailtext-inputbox'
                    value='WorkOn'
                    readOnly />
            );
        }
    };

    // icon Ïù¥ÎØ∏ÏßÄ Ï∂úÎ†•
    const iconImage = `http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/getimage/icon/${data.iconImage}`;

    // thumbnail Ïù¥ÎØ∏ÏßÄ Ï∂úÎ†•
    const thumbnailImage = `http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/getimage/thumbnail/${data.thumbnailImage}`;


    // Ïä§ÌÅ¨Î¶∞ÏÉ∑ Í∞úÏàòÏóê ÎßûÏ∂∞ Ïù¥ÎØ∏ÏßÄ Ï∂úÎ†•
    const getScreenshotImage = () => {

        const img1 = data.screenshotImage1;
        const img2 = data.screenshotImage2;
        const img3 = data.screenshotImage3;
        const img4 = data.screenshotImage4;
        const img5 = data.screenshotImage5;
        const img6 = data.screenshotImage6;

        const imgArr = [img1, img2, img3, img4, img5, img6];

        return imgArr.map((img, index) =>
            img && <img className='screenshotImg' src={`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/getimage/screenshot/${img}`} key={index} />
        );
    };

    // Í∞úÎ∞úÏûêÍ∞Ä Îì±Î°ùÌïú yaml ÌååÏùº Îã§Ïö¥Î°úÎìú
    const handlerClickDownload = (filename) => {
        const url = `http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/download/${data.yamlFile}`
        const download = document.createElement('a');

        download.href = url;
        download.setAttribute('download', filename);
        download.setAttribute('type', 'application/json');
        download.click();
    };

    return (
        <>
            <div>
                <NaviAdmin history={history} />
                <div className='sidemenu_admin-box'>
                    <div className='admin_logo'></div>
                    <ul className='sidemenu_admin'>
                        <li><Link to='/admin/setting'>ÌöåÏõê Í¥ÄÎ¶¨</Link></li>
                        <li><Link to='/admin'>Î™®Îì† Ïï±</Link></li>
                        <li id='admin-setting'><Link to='/admin/judge'>Ïã¨ÏÇ¨</Link></li>
                        <li><Link to='/admin/chart'>ÌÜµÍ≥Ñ</Link></li>
                    </ul>
                </div>

                <div className='body'>
                    <p className='body_title'>Ïã¨ÏÇ¨ Ïï± Í¥ÄÎ¶¨</p>
                    <p className='body_subtitle'>Ïï± ÏÑ∏Î∂Ä Ï†ïÎ≥¥</p>
                    <div className='detailform'>
                        <ol>
                            <li className='detailform-each'>
                                <p className='detailform-title'>Ïπ¥ÌÖåÍ≥†Î¶¨</p>
                                {handlerSetCategoryName()}
                            </li>

                            <li className='detailform-each'>
                                <p className='detailform-title'>Ïï± Ïù¥Î¶Ñ</p>
                                <input type='text'
                                    className='detailtext-inputbox'
                                    value={data.imageName}
                                    readOnly />
                            </li>

                            <li className='detailform-each'>
                                <p className='detailform-title'>Í∞ÑÎã®Ìïú Ïï± ÏÑ§Î™Ö</p>
                                <input type='text'
                                    className='detailtext-inputbox'
                                    value={data.imageDescription}
                                    readOnly />
                            </li>

                            <li className='detailform-each'>
                                <p className='detailform-title'>ÏûêÏÑ∏Ìïú ÏÑ§Î™Ö</p>
                                <textarea type='text'
                                    className='detailtext-inputbox'
                                    value={data.imageDetail}
                                    readOnly />
                            </li>

                            <div className='img-container'>
                                <div id='img-box'>
                                    <li className='imgform-each'>
                                        <p className='imgform-title1'>Ïï± ÏïÑÏù¥ÏΩò Ïù¥ÎØ∏ÏßÄ </p>
                                        <div className='icon-img-box'>
                                            <img className='iconImg' src={iconImage} />
                                        </div>
                                    </li>

                                    <li className='imgform-each'>
                                        <p className='imgform-title1'>Ïç∏ÎÑ§Ïùº Ïù¥ÎØ∏ÏßÄ </p>
                                        <div className='icon-img-box'>
                                            <img className='thumbnailImg' src={thumbnailImage} />
                                        </div>
                                    </li>
                                </div>

                                <li className='sh-imgform-each'>
                                    <p className='imgform-title2'>Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ïù¥ÎØ∏ÏßÄ</p>
                                    <div className='sh-img-box'>
                                        <div className='screenshot-detail'>
                                            {getScreenshotImage()}
                                        </div>
                                    </div>
                                </li>
                            </div>

                            <li className='detailform-each'>
                                <p className='fileform-title'>Ïã§Ìñâ ÌååÏùº Îã§Ïö¥Î°úÎìú</p>
                                <button className='file-button' type='button'
                                    onClick={handlerClickDownload}>Îã§Ïö¥Î°úÎìú</button>
                            </li>
                        </ol>

                        <div className='button-box'>
                            <button id='noJudge-button' type='button' onClick={handlerDeny}> Ïã¨ÏÇ¨ Í±∞Ï†à </button>
                            {modalIsOpen
                                &&
                                <JudgeModal setModalIsOpen={setModalIsOpen}
                                    handlerSubmitDeny={handlerSubmitDeny}
                                    denyList={denyList}
                                    handlerClickReason={handlerClickReason}
                                    reason={reason}
                                    setReason={setReason} />}
                            <button id='blackButton' type='button' onClick={handlerOnSubmit}> ÏäπÏù∏ </button>
                        </div>
                    </div>
                </div>
            </div>
        </>
    )

}
export default JudgeDetail;